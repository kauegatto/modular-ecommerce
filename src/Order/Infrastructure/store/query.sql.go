// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package store

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (id, customer_id, status_id, created_at, total_price, discount) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, customer_id, status_id, created_at, total_price, discount
`

type CreateOrderParams struct {
	ID         uuid.UUID
	CustomerID string
	StatusID   int32
	CreatedAt  pgtype.Timestamp
	TotalPrice int64
	Discount   pgtype.Numeric
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.ID,
		arg.CustomerID,
		arg.StatusID,
		arg.CreatedAt,
		arg.TotalPrice,
		arg.Discount,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.StatusID,
		&i.CreatedAt,
		&i.TotalPrice,
		&i.Discount,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, status_id, created_at, total_price, discount FROM orders WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.StatusID,
		&i.CreatedAt,
		&i.TotalPrice,
		&i.Discount,
	)
	return i, err
}

const getOrderWithItems = `-- name: GetOrderWithItems :many
SELECT o.id, o.customer_id, o.status_id, o.created_at, o.total_price, o.discount, i.id AS item_id, i.price
FROM orders o
JOIN order_items oi ON o.id = oi.order_id
JOIN items i ON i.id = oi.item_id
WHERE o.id = $1
`

type GetOrderWithItemsRow struct {
	ID         uuid.UUID
	CustomerID string
	StatusID   int32
	CreatedAt  pgtype.Timestamp
	TotalPrice int64
	Discount   pgtype.Numeric
	ItemID     uuid.UUID
	Price      int64
}

func (q *Queries) GetOrderWithItems(ctx context.Context, id uuid.UUID) ([]GetOrderWithItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderWithItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderWithItemsRow
	for rows.Next() {
		var i GetOrderWithItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.StatusID,
			&i.CreatedAt,
			&i.TotalPrice,
			&i.Discount,
			&i.ItemID,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatus = `-- name: GetStatus :one
SELECT id, status_name FROM status WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStatus(ctx context.Context, id int32) (Status, error) {
	row := q.db.QueryRow(ctx, getStatus, id)
	var i Status
	err := row.Scan(&i.ID, &i.StatusName)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_id, status_id, created_at, total_price, discount FROM orders ORDER BY created_at DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.StatusID,
			&i.CreatedAt,
			&i.TotalPrice,
			&i.Discount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStatuses = `-- name: ListStatuses :many
SELECT id, status_name FROM status ORDER BY status_name
`

func (q *Queries) ListStatuses(ctx context.Context) ([]Status, error) {
	rows, err := q.db.Query(ctx, listStatuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(&i.ID, &i.StatusName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders SET status_id = $2, total_price = $3, discount = $4 WHERE id = $1
`

type UpdateOrderParams struct {
	ID         uuid.UUID
	StatusID   int32
	TotalPrice int64
	Discount   pgtype.Numeric
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.ID,
		arg.StatusID,
		arg.TotalPrice,
		arg.Discount,
	)
	return err
}
