// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package store

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    id,
    orderID,
    totalAmount,
    created_at,
    integratorExternalID,
    kind_id,
    status_id
    ) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, orderid, totalamount, created_at, integratorexternalid, status_id, kind_id
`

type CreatePaymentParams struct {
	ID                   uuid.UUID
	Orderid              string
	Totalamount          int64
	CreatedAt            pgtype.Timestamp
	Integratorexternalid pgtype.Text
	KindID               int32
	StatusID             int32
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.Orderid,
		arg.Totalamount,
		arg.CreatedAt,
		arg.Integratorexternalid,
		arg.KindID,
		arg.StatusID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Orderid,
		&i.Totalamount,
		&i.CreatedAt,
		&i.Integratorexternalid,
		&i.StatusID,
		&i.KindID,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const getKindById = `-- name: GetKindById :one
SELECT id, name FROM payment_kind WHERE id = $1 LIMIT 1
`

func (q *Queries) GetKindById(ctx context.Context, id int32) (PaymentKind, error) {
	row := q.db.QueryRow(ctx, getKindById, id)
	var i PaymentKind
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPayment = `-- name: GetPayment :one
SELECT id, orderid, totalamount, created_at, integratorexternalid, status_id, kind_id FROM payments WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Orderid,
		&i.Totalamount,
		&i.CreatedAt,
		&i.Integratorexternalid,
		&i.StatusID,
		&i.KindID,
	)
	return i, err
}

const getPaymentByOrderId = `-- name: GetPaymentByOrderId :one
SELECT id, orderid, totalamount, created_at, integratorexternalid, status_id, kind_id FROM payments WHERE orderID = $1 LIMIT 1
`

func (q *Queries) GetPaymentByOrderId(ctx context.Context, orderid string) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByOrderId, orderid)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Orderid,
		&i.Totalamount,
		&i.CreatedAt,
		&i.Integratorexternalid,
		&i.StatusID,
		&i.KindID,
	)
	return i, err
}

const getPaymentKind = `-- name: GetPaymentKind :many
SELECT id, name FROM payment_kind
`

func (q *Queries) GetPaymentKind(ctx context.Context) ([]PaymentKind, error) {
	rows, err := q.db.Query(ctx, getPaymentKind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentKind
	for rows.Next() {
		var i PaymentKind
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentWithKindAndStatusName = `-- name: GetPaymentWithKindAndStatusName :one
SELECT 
    p.id, p.orderid, p.totalamount, p.created_at, p.integratorexternalid, p.status_id, p.kind_id,
    pk.name as kind_name,
    ps.name as status_name
FROM payments p
JOIN payment_kind pk ON p.kind_id = pk.id
JOIN payment_status ps ON p.status_id = ps.id
WHERE p.id = $1 
LIMIT 1
`

type GetPaymentWithKindAndStatusNameRow struct {
	ID                   uuid.UUID
	Orderid              string
	Totalamount          int64
	CreatedAt            pgtype.Timestamp
	Integratorexternalid pgtype.Text
	StatusID             int32
	KindID               int32
	KindName             string
	StatusName           string
}

func (q *Queries) GetPaymentWithKindAndStatusName(ctx context.Context, id uuid.UUID) (GetPaymentWithKindAndStatusNameRow, error) {
	row := q.db.QueryRow(ctx, getPaymentWithKindAndStatusName, id)
	var i GetPaymentWithKindAndStatusNameRow
	err := row.Scan(
		&i.ID,
		&i.Orderid,
		&i.Totalamount,
		&i.CreatedAt,
		&i.Integratorexternalid,
		&i.StatusID,
		&i.KindID,
		&i.KindName,
		&i.StatusName,
	)
	return i, err
}

const getStatusById = `-- name: GetStatusById :one
SELECT id, name FROM payment_status WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStatusById(ctx context.Context, id int32) (PaymentStatus, error) {
	row := q.db.QueryRow(ctx, getStatusById, id)
	var i PaymentStatus
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, orderid, totalamount, created_at, integratorexternalid, status_id, kind_id FROM payments ORDER BY created_at DESC
`

func (q *Queries) ListPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Orderid,
			&i.Totalamount,
			&i.CreatedAt,
			&i.Integratorexternalid,
			&i.StatusID,
			&i.KindID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStatus = `-- name: ListStatus :many
SELECT id, name FROM payment_status
`

func (q *Queries) ListStatus(ctx context.Context) ([]PaymentStatus, error) {
	rows, err := q.db.Query(ctx, listStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentStatus
	for rows.Next() {
		var i PaymentStatus
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :exec
UPDATE payments SET orderID = $2, totalAmount = $3, created_at = $4, integratorExternalID = $5, kind_id = $6, status_id = $7 WHERE id = $1
`

type UpdatePaymentParams struct {
	ID                   uuid.UUID
	Orderid              string
	Totalamount          int64
	CreatedAt            pgtype.Timestamp
	Integratorexternalid pgtype.Text
	KindID               int32
	StatusID             int32
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) error {
	_, err := q.db.Exec(ctx, updatePayment,
		arg.ID,
		arg.Orderid,
		arg.Totalamount,
		arg.CreatedAt,
		arg.Integratorexternalid,
		arg.KindID,
		arg.StatusID,
	)
	return err
}
