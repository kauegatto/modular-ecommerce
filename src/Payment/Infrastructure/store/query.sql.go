// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package store

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (
    id,
    orderID,
    totalAmount,
    created_at,
    integratorExternalID
    ) VALUES ($1, $2, $3, $4, $5) RETURNING id, orderid, totalamount, created_at, integratorexternalid
`

type CreatePaymentParams struct {
	ID                   uuid.UUID
	Orderid              string
	Totalamount          int64
	CreatedAt            pgtype.Timestamp
	Integratorexternalid pgtype.Text
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.Orderid,
		arg.Totalamount,
		arg.CreatedAt,
		arg.Integratorexternalid,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Orderid,
		&i.Totalamount,
		&i.CreatedAt,
		&i.Integratorexternalid,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payments WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT id, orderid, totalamount, created_at, integratorexternalid FROM payments WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Orderid,
		&i.Totalamount,
		&i.CreatedAt,
		&i.Integratorexternalid,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, orderid, totalamount, created_at, integratorexternalid FROM payments ORDER BY created_at DESC
`

func (q *Queries) ListPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.Query(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Orderid,
			&i.Totalamount,
			&i.CreatedAt,
			&i.Integratorexternalid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :exec
UPDATE payments SET orderID = $2, totalAmount = $3, created_at = $4, integratorExternalID = $5 WHERE id = $1
`

type UpdatePaymentParams struct {
	ID                   uuid.UUID
	Orderid              string
	Totalamount          int64
	CreatedAt            pgtype.Timestamp
	Integratorexternalid pgtype.Text
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) error {
	_, err := q.db.Exec(ctx, updatePayment,
		arg.ID,
		arg.Orderid,
		arg.Totalamount,
		arg.CreatedAt,
		arg.Integratorexternalid,
	)
	return err
}
